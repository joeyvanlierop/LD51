//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Sprout/Sprout Lands - Sprites - premium pack/objects/Boat/BoatControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BoatControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BoatControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BoatControls"",
    ""maps"": [
        {
            ""name"": ""Choose"",
            ""id"": ""d98e9ada-7b78-4582-93e8-430ac22c618b"",
            ""actions"": [
                {
                    ""name"": ""ChooseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""37b7fad3-a1df-4bbc-9f47-bb0220265799"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseRight"",
                    ""type"": ""Button"",
                    ""id"": ""bf219264-afd1-43a6-a081-44979350644d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dedf7986-5306-4466-a4f5-ffcecf0910c0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9674e324-d40f-4702-9ad4-e788c89a4a37"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Choose
        m_Choose = asset.FindActionMap("Choose", throwIfNotFound: true);
        m_Choose_ChooseLeft = m_Choose.FindAction("ChooseLeft", throwIfNotFound: true);
        m_Choose_ChooseRight = m_Choose.FindAction("ChooseRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Choose
    private readonly InputActionMap m_Choose;
    private IChooseActions m_ChooseActionsCallbackInterface;
    private readonly InputAction m_Choose_ChooseLeft;
    private readonly InputAction m_Choose_ChooseRight;
    public struct ChooseActions
    {
        private @BoatControls m_Wrapper;
        public ChooseActions(@BoatControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChooseLeft => m_Wrapper.m_Choose_ChooseLeft;
        public InputAction @ChooseRight => m_Wrapper.m_Choose_ChooseRight;
        public InputActionMap Get() { return m_Wrapper.m_Choose; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChooseActions set) { return set.Get(); }
        public void SetCallbacks(IChooseActions instance)
        {
            if (m_Wrapper.m_ChooseActionsCallbackInterface != null)
            {
                @ChooseLeft.started -= m_Wrapper.m_ChooseActionsCallbackInterface.OnChooseLeft;
                @ChooseLeft.performed -= m_Wrapper.m_ChooseActionsCallbackInterface.OnChooseLeft;
                @ChooseLeft.canceled -= m_Wrapper.m_ChooseActionsCallbackInterface.OnChooseLeft;
                @ChooseRight.started -= m_Wrapper.m_ChooseActionsCallbackInterface.OnChooseRight;
                @ChooseRight.performed -= m_Wrapper.m_ChooseActionsCallbackInterface.OnChooseRight;
                @ChooseRight.canceled -= m_Wrapper.m_ChooseActionsCallbackInterface.OnChooseRight;
            }
            m_Wrapper.m_ChooseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChooseLeft.started += instance.OnChooseLeft;
                @ChooseLeft.performed += instance.OnChooseLeft;
                @ChooseLeft.canceled += instance.OnChooseLeft;
                @ChooseRight.started += instance.OnChooseRight;
                @ChooseRight.performed += instance.OnChooseRight;
                @ChooseRight.canceled += instance.OnChooseRight;
            }
        }
    }
    public ChooseActions @Choose => new ChooseActions(this);
    public interface IChooseActions
    {
        void OnChooseLeft(InputAction.CallbackContext context);
        void OnChooseRight(InputAction.CallbackContext context);
    }
}
